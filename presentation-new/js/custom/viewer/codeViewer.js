// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['jquery', 'socket-io', 'highlight'], function($, ioSocket, highlight) {
    var CodeViewer;

    return CodeViewer = (function() {
      var id;

      id = 'editor';

      function CodeViewer() {
        this._initOutput = __bind(this._initOutput, this);
        this._getContent = __bind(this._getContent, this);
        this._fillViewerWithContent = __bind(this._fillViewerWithContent, this);
        this._initViewers = __bind(this._initViewers, this);
        this._executionResultReceived = __bind(this._executionResultReceived, this);
        this._fileContentChanged = __bind(this._fileContentChanged, this);
        this._initSocket = __bind(this._initSocket, this);        this._initSocket();
        this._initViewers();
        this._initOutput();
      }

      CodeViewer.prototype._initSocket = function() {
        var _this = this;

        this._socket = ioSocket.connect();
        this._socket.on('connect', function() {
          return console.log('connect');
        });
        this._socket.on('disconnect', function() {
          return console.log('disconnect');
        });
        this._socket.on('file', this._fileContentChanged);
        return this._socket.on('executionResult', this._executionResultReceived);
      };

      CodeViewer.prototype._fileContentChanged = function(data) {
        var codeViewer, fileName;

        fileName = data.fileName;
        codeViewer = this;
        console.log("Content of file " + fileName + " has changed");
        return $("code[data-file='" + fileName + "']").each(function() {
          var language;

          language = $('#' + this.id).attr('data-language');
          return $('#' + this.id).html(highlight.highlight(language, codeViewer._getContent(data.content)).value);
        });
      };

      CodeViewer.prototype._executionResultReceived = function(data) {
        var fileName;

        fileName = data.fileName;
        return $("pre[data-file='" + fileName + "']").each(function() {
          $(this).parent('.output-section').css('visibility', 'visible');
          return $(this).text(data.output);
        });
      };

      CodeViewer.prototype._initViewers = function() {
        var codeViewer;

        codeViewer = this;
        return $('code[data-file]').each(function() {
          return codeViewer._fillViewerWithContent(this.id);
        });
      };

      CodeViewer.prototype._fillViewerWithContent = function(id) {
        var fileName, language,
          _this = this;

        fileName = $('#' + id).attr('data-file');
        language = $('#' + id).attr('data-language');
        return this._socket.emit('file', {
          fileName: fileName
        }, function(data) {
          if (data.error == null) {
            console.log(language);
            return $('#' + id).html(highlight.highlight(language, _this._getContent(data.content)).value);
          } else {
            return console.log("Error loading file: " + data.error);
          }
        });
      };

      CodeViewer.prototype._getContent = function(data) {
        data = data.replace(/.*(\/\/|\#)(\s)*not shown([\s\S])*?(\/\/|\#)(\s)*shown.*\n/g, "");
        return data;
      };

      CodeViewer.prototype._initOutput = function() {
        return $('.output-section').css("visibility", "hidden");
      };

      return CodeViewer;

    })();
  });

}).call(this);

/*
//@ sourceMappingURL=codeViewer.map
*/
