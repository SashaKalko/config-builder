<!doctype html>
<html lang="de">

<head>
    <meta charset="utf-8">

    <title>Datenbanken</title>

    <meta name="description" content="A framework for easily creating beautiful presentations using HTML">
    <meta name="author" content="Thomas Endres">

    <meta name="apple-mobile-web-app-capable" content="yes"/>
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"/>

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
   
    <link rel="stylesheet" href="css/reveal.css">
    <link rel="stylesheet" href="css/theme/sky.css" id="theme">
    <link rel="stylesheet" href="css/custom.css">

    <!-- For syntax highlighting -->
    <link rel="stylesheet" href="lib/css/zenburn.css">

    <link rel="stylesheet" href="css/print/pdf.css" type="text/css" media="print">

    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
</head>

<body>
<div class="background">
</div>

<div class="reveal">

    <!-- Any section element inside of this container is displayed as a slide -->
    <div class="slides">
 <section>
  <p style="margin-top: 300px;">
   <h1>Java Config Builder</h1>
  </p>
</section>
<section>
 <h2>Motivation</h2>
  <div class="animated-html" style="overflow: hidden;">
   <animation duration="500">
    <animate data-id="bild1" data-property="opacity" data-value="1"></animate>
   </animation>
   <animation duration="500">
    <animate data-id="bild2" data-property="opacity" data-value="1"></animate>
   </animation>
   <div id="bild1" style="opacity: 0; position:absolute; height:500px; margin-top:100px; margin-left:200px;">
    <img src="img/thomas.png">
   </div>
   <div id="bild2" style="opacity: 0; position:absolute; height:300px; margin-left:400px;">
    <img src="img/bubble.png">
   </div>
  </div>
</section>
<section>
 <h2>Motivation</h2>
</section>
<section>
<h2>Features</h2>
  <ul style="margin-top:100px">
   <li class="fragment">Automatisches Laden von Werten aus verschiedenen Quellen</li>
   <li class="fragment">"Bauen" vollständig konfigurierter Objekte</li>
   <li class="fragment">"Umwandlung" geladener String-Werte in beliebige Objekte und Collections</li>
   <li class="fragment">Zusammenführen/Vervollständigen bestehender Instanzen</li>
 </ul>
</section>
<section>
 <h2>Welche Werte können geladen werden?</h2>
  <ul style="margin-top:100px">
   <li class="fragment">Properties-Dateien</li>
   <li class="fragment">System Properties</li>
   <li class="fragment">Umgebungsvariablen</li>
   <li class="fragment">Kommandozeile</li>
 </ul>
</section>
<section>
 <section>
  <h2>Wie benutzt man den Config-Builder?</h2>
 </section>
 <section>
  <h3>Klasse erstellen</h3>
  <pre><code data-trim contenteditable style="font-size: 18px; margin-top: 20px;">
public class MyConfig {

    private boolean runInTestMode;
    private int runLevel;
    private String path;
    private String userName;
    private Collection<PidFix> pidFixCollection
    private PidFix pidFix
    ...
}
  </code></pre>
 </section>
 <section>
  <h3>Annotieren</h3>
  <pre><code data-trim contenteditable style="font-size: 18px; margin-top: 20px;">
public class MyConfig {

    @DefaultValue("false")
    @CommandLineValue(shortOpt="t", longOpt="test", hasArg="false")
    private boolean runInTestMode;

    @DefaultValue("3")
    @CommandLineValue(shortOpt="rl", longOpt="runLevel", hasArg="true")
    private int runLevel;

    @EnvironmentVariableValue("PATH")
    @PropertyValue("path")
    private String path;

    @SystemPropertyValue("user.name")
    private String userName;

    @Collection
    @ValueProvider(PidFixFactory.class)
    @CommandLineValue(shortOpt="pc", longOpt="pidFixCollection", hasArg="true")
    private Collection<PidFix> pidFixCollection

    @ValueProvider(PidFixFactory.class)
    @CommandLineValue(shortOpt="p", longOpt="pidFix", hasArg="true")
    private PidFix pidFix
    ...

  </code></pre>
 </section>
 <section>
  <h3>Optional: Konfigurieren</h3>
  <pre><code data-trim contenteditable style="font-size: 18px; margin-top: 20px;">
  public class MyConfig {
   private String userName;
}
  </code></pre>
 </section>
 <section>
  <h3>Optional: Valiedierung</h3>
  <pre><code data-trim contenteditable style="font-size: 18px; margin-top: 20px;">
  public class MyConfig {
   private String userName;
}
  </code></pre>
 </section>
</section>
<section>
 <h2>Funktionsweise</h2>
  <ul style="margin-top:100px">
   <li class="fragment">lade Properties</li>
   <li class="fragment">Command Line</li>
   <li class="fragment">finde passenden Konstruktor</li>
   <li class="fragment">setze Felder</li>
   <li class="fragment">validiere</li>
 </ul>
</section>
<section>
 <h2>Kleiner Footprint</h2>
  <ul style="margin-top:100px">
   <li class="fragment">Property-Loader</li>
   <li class="fragment">Apache CLI</li>
   <li class="fragment">JSR303</li>
   <li class="fragment">Google Guava</li>
 </ul>
</section>
<section>
 <section>
  <h2>Der Property-Loader</h2>
 </section>
 <section>
  <h3>Features</h3>
  <ul style="margin-top:100px">
   <li class="fragment">Hierarchisches Finden und Laden von Key-Value Dateien (Properties/XML)</li>
   <li class="fragment">Postprocessing: Variablen, ENV, System Properties, Includes</li>
   <li class="fragment">Property Encryption/Decryption</li>
  </ul>
 </section>
 <section>
  <h3>Nutzung</h3>
 </section>
 <section>
 </section>
</section>
<section>
 <h2>Java Magie</h2>
  <ul style="margin-top:100px">
   <li class="fragment">Annotations</li>
   <li class="fragment">Reflections</li>
 </ul>
</section>
<section>
 <section>
  <h2>Annotations</h2>
 </section>
 <section>
  <h3>Beispiel</h3>
  <pre><code class="java" style="font-size: 18px; margin-top: 20px;">
@ValueExtractorAnnotation(CommandLineValueProcessor.class)
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
public @interface CommandLineValue {
    String shortOpt();
    String longOpt();
    String description() default "";
    boolean hasArg() default false;
    boolean required() default false;
}
</pre></code>
 </section>
 <section>
  <ul style="margin-top:100px">
   <li class="fragment">keine Implementierung von Methoden</li>
   <li class="fragment">keine Vererbung</li>
   <li class="fragment">beschränkte Auswahl an Typen</li>
  </ul>
 </section>
 <section>
 </section>
</section>
<section>
 <section>
  <h2>Reflections</h2>
   <ul style="margin-top:100px">
    <li>...</li>
    <li>...</li>
    <li>...</li>
  </ul>
 </section>
 <section>
 </section>
 <section>
 </section>
</section>
<section>
  <h2>Open Source</h2>
  <h2>Maven</h2>
</section>



<!-- The navigational controls UI -->
    <aside class="controls">
        <a class="left" href="#">&#x25C4;</a>
        <a class="right" href="#">&#x25BA;</a>
        <a class="up" href="#">&#x25B2;</a>
        <a class="down" href="#">&#x25BC;</a>
    </aside>

<!-- Presentation progress bar -->
    <div class="progress"><span></span></div>

</div>

<script src="js/jquery.1.10.2.js"></script>
<script src="plugin/animate/jquery.browser.js"></script>
<script src="plugin/animate/jquery.svg.js"></script>
<script src="plugin/animate/jquery.svganim.js"></script>

<script src="lib/js/head.min.js"></script>
<script src="js/reveal.min.js"></script>

<script>

    // Full list of configuration options available here:
    // https://github.com/hakimel/reveal.js#configuration
    Reveal.initialize({
        width: 1024,
        height: 768,
        margin: 0,

        //minScale: 1.0,
        //maxScale: 1.0,

        controls: false,
        progress: false,
        history: true,
        center: true,

        theme: 'sky', // available themes are in /css/theme
        transition: 'cube', // default/cube/page/concave/zoom/linear/fade/none

        // Optional libraries used to extend on reveal.js
        dependencies: [
            { src: 'lib/js/classList.js', condition: function() {
                return !document.body.classList;
            } },
            { src: 'plugin/markdown/marked.js', condition: function() {
                return !!document.querySelector('[data-markdown]');
            } },
            { src: 'plugin/markdown/markdown.js', condition: function() {
                return !!document.querySelector('[data-markdown]');
            } },
            { src: 'plugin/highlight/highlight.js', async: true, callback: function() {
                hljs.initHighlightingOnLoad();
            } },
            { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() {
                return !!document.body.classList;
            } },
            { src: 'plugin/notes/notes.js', async: true, condition: function() {
                return !!document.body.classList;
            } },
            { src: 'plugin/animate/reveal.animate.js', async: true, callback: function() {
                var animator = Reveal.Animate();
                animator.initialize();
                animator.addAnimationProvider('.animated-svg', Reveal.Animate.Svg());
                animator.addAnimationProvider('.animated-html', Reveal.Animate.Html());
                animator.setPrintValues();
            } }
        ]
    });

</script>

</body>
</html>
